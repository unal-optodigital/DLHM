/*
 * Copyright 2017 Universidad Nacional de Colombia
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package unal.od.dlhm.rec;

import java.awt.Toolkit;
import java.util.prefs.Preferences;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import unal.od.dlhm.PreferencesKeys;

/**
 *
 * @author: Pablo Piedrahita-Quintero <jppiedrahitaq@unal.edu.co>
 * @author: Carlos Trujillo <catrujila@unal.edu.co>
 * @author: Jorge Garcia-Sucerquia <jisucerquia@unal.edu.co>
 */
public class ReconstructionSettingsFrame extends javax.swing.JFrame implements PreferencesKeys {

    private static final String TITLE = "Reconstruction settings";
//    private static final String[] units = new String[]{"Nanometers", "Micrometers", "Millimeters", "Centimeters", "Meters"};
    private static final String[] UNITS_ABVS = new String[]{"nm", "um", "mm", "cm", "m"};

    //units
    private int lambdaIdx;
    private int reconstructionIdx;
    private int sourceToScreenIdx;
    private int inputSizeIdx;
    private int outputSizeIdx;

    //propagation
    private boolean cosineSelected;
    private float cosineBorderWidth;
    
    private boolean numericalSelected;
    private boolean averageSelected;
    private boolean noneSelected;
    private int averageDimension;

    private boolean stepSelected;
    private String maxPlanesString;

    //scaling
    private boolean amplitudeLogSelected;
    private boolean intensityLogSelected;

    private boolean phaseByteSelected;
    private boolean amplitudeByteSelected;
    private boolean intensityByteSelected;
    private boolean realByteSelected;
    private boolean imaginaryByteSelected;

    private final Preferences pref;

    private final ReconstructionFrame parent;

    /**
     * Creates new form SettingsFrame.
     *
     * @param parent
     */
    public ReconstructionSettingsFrame(ReconstructionFrame parent) {
        pref = Preferences.userNodeForPackage(getClass());
        this.parent = parent;

        loadPrefs();

        setLocationRelativeTo(parent);
        initComponents();
    }

    private void loadPrefs() {
        //units
        lambdaIdx = unitToIdx(pref.get(REC_LAMBDA_UNITS, "nm"));
        reconstructionIdx = unitToIdx(pref.get(REC_RECONSTRUCTION_DISTANCE_UNITS, "um"));
        sourceToScreenIdx = unitToIdx(pref.get(REC_SOURCE_TO_SCREEN_DISTANCE_UNITS, "mm"));
        inputSizeIdx = unitToIdx(pref.get(REC_INPUT_SIZE_UNITS, "mm"));
        outputSizeIdx = unitToIdx(pref.get(REC_OUTPUT_SIZE_UNITS, "um"));

        stepSelected = pref.getBoolean(REC_IS_STEP, true);
        maxPlanesString = "" + pref.getInt(REC_MAX_PLANES, 10);

        //cosine filter
        cosineSelected = pref.getBoolean(REC_COSINE_FILTER, true);
        cosineBorderWidth = pref.getFloat(REC_COSINE_BORDER_WIDTH, 0.1f);
        
        //contrast
        int tmp = pref.getInt(REC_CONTRAST_TYPE, 2);
        numericalSelected = (tmp == 0);
        averageSelected = (tmp == 1);
        noneSelected = (tmp == 2);
        averageDimension = pref.getInt(REC_AVERAGE_DIMENSION, 50);

        //scaling
        amplitudeLogSelected = pref.getBoolean(REC_AMPLITUDE_LOG, false);
        intensityLogSelected = pref.getBoolean(REC_INTENSITY_LOG, false);

        phaseByteSelected = pref.getBoolean(REC_PHASE_8_BIT, false);
        amplitudeByteSelected = pref.getBoolean(REC_AMPLITUDE_8_BIT, true);
        intensityByteSelected = pref.getBoolean(REC_INTENSITY_8_BIT, true);
        realByteSelected = pref.getBoolean(REC_REAL_8_BIT, false);
        imaginaryByteSelected = pref.getBoolean(REC_IMAGINARY_8_BIT, false);
    }

    private int unitToIdx(String unit) {
        if (unit.equals("nm")) {
            return 0;
        } else if (unit.equals("um")) {
            return 1;
        } else if (unit.equals("mm")) {
            return 2;
        } else if (unit.equals("cm")) {
            return 3;
        } else {
            return 4;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contrastGroup = new javax.swing.ButtonGroup();
        batchGroup = new javax.swing.ButtonGroup();
        settingsPane = new javax.swing.JTabbedPane();
        tabUnitsPanel = new javax.swing.JPanel();
        unitsPanel = new javax.swing.JPanel();
        lambdaCombo = new javax.swing.JComboBox();
        sourceToScreenCombo = new javax.swing.JComboBox();
        reconstructionCombo = new javax.swing.JComboBox();
        inputSizeCombo = new javax.swing.JComboBox();
        outputSizeCombo = new javax.swing.JComboBox();
        lambdaLabel = new javax.swing.JLabel();
        reconstructionLabel = new javax.swing.JLabel();
        sourceToScreenLabel = new javax.swing.JLabel();
        inputSizeLabel = new javax.swing.JLabel();
        outputSizeLabel = new javax.swing.JLabel();
        applyUnitsBtn = new javax.swing.JButton();
        propagationPanel = new javax.swing.JPanel();
        contrastPanel = new javax.swing.JPanel();
        numericalRadio = new javax.swing.JRadioButton();
        averageRadio = new javax.swing.JRadioButton();
        noneRadio = new javax.swing.JRadioButton();
        averageDimensionField = new javax.swing.JTextField();
        applyPropagationPanel = new javax.swing.JButton();
        batchPanel = new javax.swing.JPanel();
        stepRadio = new javax.swing.JRadioButton();
        planesRadio = new javax.swing.JRadioButton();
        warningLabel = new javax.swing.JLabel();
        warningField = new javax.swing.JTextField();
        rstDialogsBtn = new javax.swing.JButton();
        cosineFilterPanel = new javax.swing.JPanel();
        cosineChk = new javax.swing.JCheckBox();
        borderWidthLabel = new javax.swing.JLabel();
        borderWidthField = new javax.swing.JTextField();
        scalingPanel = new javax.swing.JPanel();
        logPanel = new javax.swing.JPanel();
        intensityLogChk = new javax.swing.JCheckBox();
        amplitudeLogChk = new javax.swing.JCheckBox();
        applyScalingBtn = new javax.swing.JButton();
        bytePanel = new javax.swing.JPanel();
        phaseByteChk = new javax.swing.JCheckBox();
        amplitudeByteChk = new javax.swing.JCheckBox();
        intensityByteChk = new javax.swing.JCheckBox();
        realByteChk = new javax.swing.JCheckBox();
        imaginaryByteChk = new javax.swing.JCheckBox();
        cancelBtn = new javax.swing.JButton();
        okBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(TITLE);
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icon.png")));
        setMinimumSize(new java.awt.Dimension(229, 389));
        setResizable(false);

        settingsPane.setMaximumSize(new java.awt.Dimension(219, 350));

        tabUnitsPanel.setMaximumSize(new java.awt.Dimension(214, 419));
        tabUnitsPanel.setMinimumSize(new java.awt.Dimension(214, 419));
        tabUnitsPanel.setPreferredSize(new java.awt.Dimension(214, 419));

        unitsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Units"));
        unitsPanel.setMaximumSize(new java.awt.Dimension(194, 189));
        unitsPanel.setMinimumSize(new java.awt.Dimension(194, 189));

        lambdaCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nanometers", "Micrometers", "Millimeters", "Centimeters", "Meters" }));
        lambdaCombo.setSelectedIndex(lambdaIdx);
        lambdaCombo.setMaximumSize(new java.awt.Dimension(83, 20));

        sourceToScreenCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nanometers", "Micrometers", "Millimeters", "Centimeters", "Meters" }));
        sourceToScreenCombo.setSelectedIndex(sourceToScreenIdx);
        sourceToScreenCombo.setMaximumSize(new java.awt.Dimension(83, 20));

        reconstructionCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nanometers", "Micrometers", "Millimeters", "Centimeters", "Meters" }));
        reconstructionCombo.setSelectedIndex(reconstructionIdx);
        reconstructionCombo.setMaximumSize(new java.awt.Dimension(83, 20));

        inputSizeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nanometers", "Micrometers", "Millimeters", "Centimeters", "Meters" }));
        inputSizeCombo.setSelectedIndex(inputSizeIdx);
        inputSizeCombo.setMaximumSize(new java.awt.Dimension(83, 20));

        outputSizeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nanometers", "Micrometers", "Millimeters", "Centimeters", "Meters" }));
        outputSizeCombo.setSelectedIndex(outputSizeIdx);
        outputSizeCombo.setMaximumSize(new java.awt.Dimension(83, 20));

        lambdaLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lambdaLabel.setText("Wavelength:");
        lambdaLabel.setMaximumSize(new java.awt.Dimension(69, 14));
        lambdaLabel.setMinimumSize(new java.awt.Dimension(69, 14));
        lambdaLabel.setPreferredSize(new java.awt.Dimension(69, 14));

        reconstructionLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        reconstructionLabel.setText("Recon. dist.:");
        reconstructionLabel.setToolTipText("Reconstruction distance.");
        reconstructionLabel.setMaximumSize(new java.awt.Dimension(69, 14));
        reconstructionLabel.setMinimumSize(new java.awt.Dimension(69, 14));
        reconstructionLabel.setPreferredSize(new java.awt.Dimension(69, 14));

        sourceToScreenLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        sourceToScreenLabel.setText("So. - Sc. dist.:");
        sourceToScreenLabel.setToolTipText("Source to screen distance.");

        inputSizeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        inputSizeLabel.setText("Input size:");
        inputSizeLabel.setToolTipText("");
        inputSizeLabel.setMaximumSize(new java.awt.Dimension(69, 14));
        inputSizeLabel.setMinimumSize(new java.awt.Dimension(69, 14));
        inputSizeLabel.setPreferredSize(new java.awt.Dimension(69, 14));

        outputSizeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        outputSizeLabel.setText("Output size:");
        outputSizeLabel.setMaximumSize(new java.awt.Dimension(69, 14));
        outputSizeLabel.setMinimumSize(new java.awt.Dimension(69, 14));
        outputSizeLabel.setPreferredSize(new java.awt.Dimension(69, 14));

        javax.swing.GroupLayout unitsPanelLayout = new javax.swing.GroupLayout(unitsPanel);
        unitsPanel.setLayout(unitsPanelLayout);
        unitsPanelLayout.setHorizontalGroup(
            unitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(unitsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(unitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(unitsPanelLayout.createSequentialGroup()
                        .addComponent(sourceToScreenLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sourceToScreenCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(unitsPanelLayout.createSequentialGroup()
                        .addComponent(reconstructionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(reconstructionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(unitsPanelLayout.createSequentialGroup()
                        .addComponent(lambdaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lambdaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(unitsPanelLayout.createSequentialGroup()
                        .addComponent(outputSizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(outputSizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(unitsPanelLayout.createSequentialGroup()
                        .addComponent(inputSizeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(inputSizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        unitsPanelLayout.setVerticalGroup(
            unitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(unitsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(unitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lambdaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lambdaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(unitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reconstructionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reconstructionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(unitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sourceToScreenCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sourceToScreenLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(unitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputSizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputSizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(unitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputSizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputSizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11))
        );

        applyUnitsBtn.setText("Apply");
        applyUnitsBtn.setMaximumSize(new java.awt.Dimension(70, 23));
        applyUnitsBtn.setMinimumSize(new java.awt.Dimension(70, 23));
        applyUnitsBtn.setPreferredSize(new java.awt.Dimension(70, 23));
        applyUnitsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyUnitsBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabUnitsPanelLayout = new javax.swing.GroupLayout(tabUnitsPanel);
        tabUnitsPanel.setLayout(tabUnitsPanelLayout);
        tabUnitsPanelLayout.setHorizontalGroup(
            tabUnitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabUnitsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabUnitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabUnitsPanelLayout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(applyUnitsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(unitsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        tabUnitsPanelLayout.setVerticalGroup(
            tabUnitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabUnitsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(unitsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(185, 185, 185)
                .addComponent(applyUnitsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        settingsPane.addTab("Units", tabUnitsPanel);

        propagationPanel.setMaximumSize(new java.awt.Dimension(214, 419));
        propagationPanel.setMinimumSize(new java.awt.Dimension(214, 419));
        propagationPanel.setPreferredSize(new java.awt.Dimension(214, 419));

        contrastPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Contrast hologram calculation"));
        contrastPanel.setMaximumSize(new java.awt.Dimension(194, 117));
        contrastPanel.setMinimumSize(new java.awt.Dimension(194, 117));
        contrastPanel.setPreferredSize(new java.awt.Dimension(194, 117));

        contrastGroup.add(numericalRadio);
        numericalRadio.setSelected(numericalSelected);
        numericalRadio.setText("Numerical");
        numericalRadio.setMargin(new java.awt.Insets(2, 0, 2, 2));
        numericalRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrastRadioActionPerformed(evt);
            }
        });

        contrastGroup.add(averageRadio);
        averageRadio.setSelected(averageSelected);
        averageRadio.setText("Average");
        averageRadio.setMargin(new java.awt.Insets(2, 0, 2, 2));
        averageRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrastRadioActionPerformed(evt);
            }
        });

        contrastGroup.add(noneRadio);
        noneRadio.setSelected(noneSelected);
        noneRadio.setText("None");
        noneRadio.setMargin(new java.awt.Insets(2, 0, 2, 2));
        noneRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrastRadioActionPerformed(evt);
            }
        });

        averageDimensionField.setText("" + averageDimension);
        averageDimensionField.setToolTipText("A value of 1 indicates that the average is calculated using the entire hologram.");
        averageDimensionField.setEnabled(averageSelected);
        averageDimensionField.setMaximumSize(new java.awt.Dimension(59, 20));
        averageDimensionField.setMinimumSize(new java.awt.Dimension(59, 20));
        averageDimensionField.setPreferredSize(new java.awt.Dimension(59, 20));
        averageDimensionField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldFocusGained(evt);
            }
        });
        averageDimensionField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                averageDimensionFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout contrastPanelLayout = new javax.swing.GroupLayout(contrastPanel);
        contrastPanel.setLayout(contrastPanelLayout);
        contrastPanelLayout.setHorizontalGroup(
            contrastPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contrastPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(contrastPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(numericalRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(averageRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(noneRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(36, 36, 36)
                .addComponent(averageDimensionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        contrastPanelLayout.setVerticalGroup(
            contrastPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contrastPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(numericalRadio)
                .addGap(3, 3, 3)
                .addGroup(contrastPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(averageRadio)
                    .addComponent(averageDimensionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addComponent(noneRadio)
                .addContainerGap())
        );

        applyPropagationPanel.setText("Apply");
        applyPropagationPanel.setMaximumSize(new java.awt.Dimension(70, 23));
        applyPropagationPanel.setMinimumSize(new java.awt.Dimension(70, 23));
        applyPropagationPanel.setPreferredSize(new java.awt.Dimension(70, 23));
        applyPropagationPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyPropagationPanelActionPerformed(evt);
            }
        });

        batchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Batch Reconstruction"));
        batchPanel.setMaximumSize(new java.awt.Dimension(194, 117));
        batchPanel.setMinimumSize(new java.awt.Dimension(194, 117));
        batchPanel.setPreferredSize(new java.awt.Dimension(194, 117));

        batchGroup.add(stepRadio);
        stepRadio.setSelected(stepSelected);
        stepRadio.setText("Step size");
        stepRadio.setMargin(new java.awt.Insets(2, 0, 2, 2));

        batchGroup.add(planesRadio);
        planesRadio.setSelected(!stepSelected);
        planesRadio.setText("Number of planes");
        planesRadio.setMargin(new java.awt.Insets(2, 0, 2, 2));

        warningLabel.setText("Max. Planes:");
        warningLabel.setMaximumSize(new java.awt.Dimension(93, 14));
        warningLabel.setMinimumSize(new java.awt.Dimension(93, 14));
        warningLabel.setPreferredSize(new java.awt.Dimension(93, 14));

        warningField.setText(maxPlanesString);
        warningField.setMaximumSize(new java.awt.Dimension(59, 20));
        warningField.setMinimumSize(new java.awt.Dimension(59, 20));
        warningField.setPreferredSize(new java.awt.Dimension(59, 20));
        warningField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldFocusGained(evt);
            }
        });

        javax.swing.GroupLayout batchPanelLayout = new javax.swing.GroupLayout(batchPanel);
        batchPanel.setLayout(batchPanelLayout);
        batchPanelLayout.setHorizontalGroup(
            batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(batchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(batchPanelLayout.createSequentialGroup()
                        .addComponent(warningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(warningField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(stepRadio)
                    .addComponent(planesRadio))
                .addGap(10, 10, 10))
        );
        batchPanelLayout.setVerticalGroup(
            batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(batchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(stepRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(planesRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(batchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(warningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(warningField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11))
        );

        rstDialogsBtn.setText("Reset dialogs");
        rstDialogsBtn.setMaximumSize(new java.awt.Dimension(100, 23));
        rstDialogsBtn.setMinimumSize(new java.awt.Dimension(100, 23));
        rstDialogsBtn.setPreferredSize(new java.awt.Dimension(100, 23));
        rstDialogsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rstDialogsBtnActionPerformed(evt);
            }
        });

        cosineFilterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Cosine filtering"));
        cosineFilterPanel.setMaximumSize(new java.awt.Dimension(194, 91));
        cosineFilterPanel.setMinimumSize(new java.awt.Dimension(194, 91));
        cosineFilterPanel.setPreferredSize(new java.awt.Dimension(194, 91));

        cosineChk.setSelected(cosineSelected);
        cosineChk.setText("Enabled");
        cosineChk.setToolTipText("Enables/disables the cosine filtering option.");
        cosineChk.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cosineChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cosineChkActionPerformed(evt);
            }
        });

        borderWidthLabel.setText("Border width:");
        borderWidthLabel.setEnabled(cosineSelected);

        borderWidthField.setText("" + cosineBorderWidth);
        borderWidthField.setToolTipText("Sets the border width as a fraction. For example, if the image size is 512 and the border width is 0.1, the border will measure 512 * 0.1. ");
        borderWidthField.setEnabled(cosineSelected);
        borderWidthField.setMaximumSize(new java.awt.Dimension(59, 20));
        borderWidthField.setMinimumSize(new java.awt.Dimension(59, 20));
        borderWidthField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textFieldFocusGained(evt);
            }
        });

        javax.swing.GroupLayout cosineFilterPanelLayout = new javax.swing.GroupLayout(cosineFilterPanel);
        cosineFilterPanel.setLayout(cosineFilterPanelLayout);
        cosineFilterPanelLayout.setHorizontalGroup(
            cosineFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cosineFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cosineFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cosineChk)
                    .addGroup(cosineFilterPanelLayout.createSequentialGroup()
                        .addComponent(borderWidthLabel)
                        .addGap(38, 38, 38)
                        .addComponent(borderWidthField, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        cosineFilterPanelLayout.setVerticalGroup(
            cosineFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cosineFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cosineChk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(cosineFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(borderWidthLabel)
                    .addComponent(borderWidthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout propagationPanelLayout = new javax.swing.GroupLayout(propagationPanel);
        propagationPanel.setLayout(propagationPanelLayout);
        propagationPanelLayout.setHorizontalGroup(
            propagationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(propagationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(propagationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, propagationPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(rstDialogsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(applyPropagationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(contrastPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(batchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cosineFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        propagationPanelLayout.setVerticalGroup(
            propagationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, propagationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cosineFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contrastPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(batchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(propagationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(applyPropagationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rstDialogsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        settingsPane.addTab("Reconstruction", propagationPanel);

        scalingPanel.setMaximumSize(new java.awt.Dimension(214, 419));
        scalingPanel.setMinimumSize(new java.awt.Dimension(214, 419));
        scalingPanel.setPreferredSize(new java.awt.Dimension(214, 419));

        logPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Logarithmic Scaling"));
        logPanel.setMaximumSize(new java.awt.Dimension(194, 86));
        logPanel.setMinimumSize(new java.awt.Dimension(194, 86));
        logPanel.setPreferredSize(new java.awt.Dimension(194, 86));

        intensityLogChk.setSelected(intensityLogSelected);
        intensityLogChk.setText("Intensity");
        intensityLogChk.setMargin(new java.awt.Insets(0, 0, 0, 0));
        intensityLogChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intensityLogChkActionPerformed(evt);
            }
        });

        amplitudeLogChk.setSelected(amplitudeLogSelected);
        amplitudeLogChk.setText("Amplitude");
        amplitudeLogChk.setMargin(new java.awt.Insets(0, 0, 0, 0));
        amplitudeLogChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amplitudeLogChkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout logPanelLayout = new javax.swing.GroupLayout(logPanel);
        logPanel.setLayout(logPanelLayout);
        logPanelLayout.setHorizontalGroup(
            logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(logPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(amplitudeLogChk)
                    .addComponent(intensityLogChk))
                .addGap(103, 103, 103))
        );
        logPanelLayout.setVerticalGroup(
            logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(logPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(amplitudeLogChk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(intensityLogChk)
                .addGap(9, 9, 9))
        );

        applyScalingBtn.setText("Apply");
        applyScalingBtn.setMaximumSize(new java.awt.Dimension(70, 23));
        applyScalingBtn.setMinimumSize(new java.awt.Dimension(70, 23));
        applyScalingBtn.setPreferredSize(new java.awt.Dimension(70, 23));
        applyScalingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyScalingBtnActionPerformed(evt);
            }
        });

        bytePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("8-bit Scaling"));
        bytePanel.setMaximumSize(new java.awt.Dimension(194, 164));
        bytePanel.setMinimumSize(new java.awt.Dimension(194, 164));
        bytePanel.setPreferredSize(new java.awt.Dimension(194, 164));

        phaseByteChk.setSelected(phaseByteSelected);
        phaseByteChk.setText("Phase");
        phaseByteChk.setMargin(new java.awt.Insets(0, 0, 0, 0));

        amplitudeByteChk.setSelected(amplitudeByteSelected);
        amplitudeByteChk.setText("Amplitude");
        amplitudeByteChk.setMargin(new java.awt.Insets(0, 0, 0, 0));

        intensityByteChk.setSelected(intensityByteSelected);
        intensityByteChk.setText("Intensity");
        intensityByteChk.setMargin(new java.awt.Insets(0, 0, 0, 0));

        realByteChk.setSelected(realByteSelected);
        realByteChk.setText("Real");
        realByteChk.setMargin(new java.awt.Insets(0, 0, 0, 0));

        imaginaryByteChk.setSelected(imaginaryByteSelected);
        imaginaryByteChk.setText("Imaginary");
        imaginaryByteChk.setMargin(new java.awt.Insets(0, 0, 0, 0));

        javax.swing.GroupLayout bytePanelLayout = new javax.swing.GroupLayout(bytePanel);
        bytePanel.setLayout(bytePanelLayout);
        bytePanelLayout.setHorizontalGroup(
            bytePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bytePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bytePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(amplitudeByteChk)
                    .addComponent(intensityByteChk)
                    .addComponent(phaseByteChk)
                    .addComponent(realByteChk)
                    .addComponent(imaginaryByteChk))
                .addGap(103, 103, 103))
        );
        bytePanelLayout.setVerticalGroup(
            bytePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bytePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(phaseByteChk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(amplitudeByteChk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(intensityByteChk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(realByteChk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(imaginaryByteChk)
                .addContainerGap())
        );

        javax.swing.GroupLayout scalingPanelLayout = new javax.swing.GroupLayout(scalingPanel);
        scalingPanel.setLayout(scalingPanelLayout);
        scalingPanelLayout.setHorizontalGroup(
            scalingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scalingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scalingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, scalingPanelLayout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(applyScalingBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(scalingPanelLayout.createSequentialGroup()
                        .addGroup(scalingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(logPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bytePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        scalingPanelLayout.setVerticalGroup(
            scalingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scalingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bytePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(118, 118, 118)
                .addComponent(applyScalingBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        settingsPane.addTab("Scaling", scalingPanel);

        cancelBtn.setText("Cancel");
        cancelBtn.setMaximumSize(new java.awt.Dimension(70, 23));
        cancelBtn.setMinimumSize(new java.awt.Dimension(70, 23));
        cancelBtn.setPreferredSize(new java.awt.Dimension(70, 23));
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        okBtn.setText("Ok");
        okBtn.setMaximumSize(new java.awt.Dimension(70, 23));
        okBtn.setMinimumSize(new java.awt.Dimension(70, 23));
        okBtn.setPreferredSize(new java.awt.Dimension(70, 23));
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(settingsPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(okBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(settingsPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(okBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void applyUnitsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyUnitsBtnActionPerformed
        pref.put(REC_LAMBDA_UNITS, UNITS_ABVS[lambdaCombo.getSelectedIndex()]);
        pref.put(REC_RECONSTRUCTION_DISTANCE_UNITS, UNITS_ABVS[reconstructionCombo.getSelectedIndex()]);
        pref.put(REC_SOURCE_TO_SCREEN_DISTANCE_UNITS, UNITS_ABVS[sourceToScreenCombo.getSelectedIndex()]);
        pref.put(REC_INPUT_SIZE_UNITS, UNITS_ABVS[inputSizeCombo.getSelectedIndex()]);
        pref.put(REC_OUTPUT_SIZE_UNITS, UNITS_ABVS[outputSizeCombo.getSelectedIndex()]);

        parent.updateUnitsPrefs();
    }//GEN-LAST:event_applyUnitsBtnActionPerformed

    private void applyPropagationPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyPropagationPanelActionPerformed

        //cosine filter
        pref.putBoolean(REC_COSINE_FILTER, cosineChk.isSelected());
        try {
            float filterWidth = Float.parseFloat(borderWidthField.getText());
            
            if (filterWidth <= 0 || filterWidth > 0.5) {
                JOptionPane.showMessageDialog(this, "Border width must be greater than 0 and lower than 0.5.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            pref.putFloat(REC_COSINE_BORDER_WIDTH, filterWidth);
        } catch (NumberFormatException exc) {
            JOptionPane.showMessageDialog(this, "Please insert a valid border width for the cosine filter.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //contrast calculation
        if (numericalRadio.isSelected()) {
            pref.putInt(REC_CONTRAST_TYPE, 0);
        } else if (averageRadio.isSelected()) {
            pref.putInt(REC_CONTRAST_TYPE, 1);
        } else {
            pref.putInt(REC_CONTRAST_TYPE, 2);
        }
        try {
            int avgDimension = Integer.parseInt(averageDimensionField.getText());
            
            if (avgDimension < 1) {
                JOptionPane.showMessageDialog(this, "Averaging dimension must be greater than or equal to 1.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            pref.putInt(REC_AVERAGE_DIMENSION, avgDimension);
        } catch (NumberFormatException exc) {
            JOptionPane.showMessageDialog(this, "Please insert a valid averaging dimension.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //batch
        pref.putBoolean(REC_IS_STEP, stepRadio.isSelected());
        try {
            int planes = Integer.parseInt(warningField.getText());
            if (planes <= 1) {
                JOptionPane.showMessageDialog(this, "Max. Planes must be greater than 1.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            pref.putInt(REC_MAX_PLANES, planes);
        } catch (NumberFormatException exc) {
            JOptionPane.showMessageDialog(this, "Please insert a valid integer.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        parent.updatePropagationPrefs();
    }//GEN-LAST:event_applyPropagationPanelActionPerformed

    private void applyScalingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyScalingBtnActionPerformed
        pref.putBoolean(REC_AMPLITUDE_LOG, amplitudeLogChk.isSelected());
        pref.putBoolean(REC_INTENSITY_LOG, intensityLogChk.isSelected());

        pref.putBoolean(REC_PHASE_8_BIT, phaseByteChk.isSelected());
        pref.putBoolean(REC_AMPLITUDE_8_BIT, amplitudeByteChk.isSelected());
        pref.putBoolean(REC_INTENSITY_8_BIT, intensityByteChk.isSelected());
        pref.putBoolean(REC_REAL_8_BIT, realByteChk.isSelected());
        pref.putBoolean(REC_IMAGINARY_8_BIT, imaginaryByteChk.isSelected());

        parent.updateScalingPrefs();
    }//GEN-LAST:event_applyScalingBtnActionPerformed

    private void rstDialogsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rstDialogsBtnActionPerformed
//       pref.putBoolean(SHOW_FREQUENCIES_DIALOG, true);
    }//GEN-LAST:event_rstDialogsBtnActionPerformed

    private void okBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed
        applyUnitsBtnActionPerformed(null);
        applyPropagationPanelActionPerformed(null);
        applyScalingBtnActionPerformed(null);

        setVisible(false);
        dispose();
    }//GEN-LAST:event_okBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void textFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldFocusGained
        JTextField field = (JTextField) evt.getComponent();
        field.selectAll();
    }//GEN-LAST:event_textFieldFocusGained

    private void cosineChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cosineChkActionPerformed
        borderWidthField.setEnabled(cosineChk.isSelected());
    }//GEN-LAST:event_cosineChkActionPerformed

    private void contrastRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrastRadioActionPerformed
        averageDimensionField.setEnabled(averageRadio.isSelected());
    }//GEN-LAST:event_contrastRadioActionPerformed

    private void averageDimensionFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_averageDimensionFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_averageDimensionFieldActionPerformed

    private void amplitudeLogChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amplitudeLogChkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_amplitudeLogChkActionPerformed

    private void intensityLogChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intensityLogChkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_intensityLogChkActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox amplitudeByteChk;
    private javax.swing.JCheckBox amplitudeLogChk;
    private javax.swing.JButton applyPropagationPanel;
    private javax.swing.JButton applyScalingBtn;
    private javax.swing.JButton applyUnitsBtn;
    private javax.swing.JTextField averageDimensionField;
    private javax.swing.JRadioButton averageRadio;
    private javax.swing.ButtonGroup batchGroup;
    private javax.swing.JPanel batchPanel;
    private javax.swing.JTextField borderWidthField;
    private javax.swing.JLabel borderWidthLabel;
    private javax.swing.JPanel bytePanel;
    private javax.swing.JButton cancelBtn;
    private javax.swing.ButtonGroup contrastGroup;
    private javax.swing.JPanel contrastPanel;
    private javax.swing.JCheckBox cosineChk;
    private javax.swing.JPanel cosineFilterPanel;
    private javax.swing.JCheckBox imaginaryByteChk;
    private javax.swing.JComboBox inputSizeCombo;
    private javax.swing.JLabel inputSizeLabel;
    private javax.swing.JCheckBox intensityByteChk;
    private javax.swing.JCheckBox intensityLogChk;
    private javax.swing.JComboBox lambdaCombo;
    private javax.swing.JLabel lambdaLabel;
    private javax.swing.JPanel logPanel;
    private javax.swing.JRadioButton noneRadio;
    private javax.swing.JRadioButton numericalRadio;
    private javax.swing.JButton okBtn;
    private javax.swing.JComboBox outputSizeCombo;
    private javax.swing.JLabel outputSizeLabel;
    private javax.swing.JCheckBox phaseByteChk;
    private javax.swing.JRadioButton planesRadio;
    private javax.swing.JPanel propagationPanel;
    private javax.swing.JCheckBox realByteChk;
    private javax.swing.JComboBox reconstructionCombo;
    private javax.swing.JLabel reconstructionLabel;
    private javax.swing.JButton rstDialogsBtn;
    private javax.swing.JPanel scalingPanel;
    private javax.swing.JTabbedPane settingsPane;
    private javax.swing.JComboBox sourceToScreenCombo;
    private javax.swing.JLabel sourceToScreenLabel;
    private javax.swing.JRadioButton stepRadio;
    private javax.swing.JPanel tabUnitsPanel;
    private javax.swing.JPanel unitsPanel;
    private javax.swing.JTextField warningField;
    private javax.swing.JLabel warningLabel;
    // End of variables declaration//GEN-END:variables
}
